#include <iostream>
#include <time.h>
#include <cstdlib>
#include <windows.h>
#include <process.h>
#include <conio.h>
using namespace std;

#define MAX 100
#define WIDTH 77
#define HEIGHT 22
#define FOOD 1
#define WALL -2
#define SNAKE -1
#define NOTHING 0
#define INIT_SNAKE_LENGTH 4
#define SNAKE -1
static int dx[5] = { 1, 0, -1, 0 };
static int dy[5] = { 0, -1, 0, 1 };
#define RIGHT 0
#define UP 1
#define LEFT 2
#define DOWN 3
int input = RIGHT;
int main()
{
	int delay = 50;
	srand(time(NULL));
	snake nagini;
	nagini.initGround();
	nagini.initSnake();
	nagini.updateFood();
	nagini.firstDraw();
	_beginthread(userInput, 0, (void*)0);
	
	do
	{
		nagini.updateSnake(delay);
		if (item == FOOD)
			nagini.updateFood();
	} while (item >= 0 && input != EXIT);
struct Coordinate
{
	int x, y;
};

class snake
{
private:
	int length;
	Coordinate body[WIDTH*HEIGHT];
	int direction;
	int ground[MAX][MAX];
	int foodCounter;
public:
	void initGround();
	void initSnake();
	void updateSnake(int delay);
	void updateFood();
	void firstDraw();
	int getFoodCounter();
};

void snake::initGround()
{
	int i, j;
	for (i = 0; i < MAX; i++)
		for (j = 0; j < MAX; j++)
			ground[i][j] = 0;

	for (i = 0; i <= WIDTH + 1; i++)
	{
		//top bottom wall
		ground[0][i] = WALL;
		ground[HEIGHT + 1][i] = WALL;
	}
	for (i = 0; i <= HEIGHT + 1; i++)
	{
		//right left wall
		ground[i][0] = WALL;
		ground[i][WIDTH + 1] = WALL;
	}
}
void snake::initSnake()
{
	length = INIT_SNAKE_LENGTH: //set head of snake to be at the centre
	body[0].x = WIDTH / 2;
	body[0].y = HEIGHT / 2;
	direction = input;
	foodCounter = 0;
        int i;
	for (i = 1; i < length; i++)
	{
	body[i].x = body[i - 1].x - dx[direction];//if moving right,
	body[i].y = body[i - 1].y - dy[direction];//body is on the left
	}
        for (i = 0; i < length; i++)
	ground[body[i].y][body[i].x] = SNAKE;
}
void snake::firstDraw()
{
	clearScreen();
	int i, j;
	for (i = 0; i <= HEIGHT + 1; i++)
	{
		for (j = 0; j <= WIDTH + 1; j++)
		{
			switch (ground[i][j])
			{
			case NOTHING:
				cout << " "; break;
			case WALL:
				if ((i == 0 && j == 0)
					|| (i == 0 && j == WIDTH + 1)
					|| (i == HEIGHT + 1 && j == 0)
					|| (i == HEIGHT + 1 && j == WIDTH + 1))
					cout << "+";    //the 4 corners
				else
					if (j == 0 || j == WIDTH + 1)
						cout << "|";    //left/right wall
					else
						cout << "-";    //top/bottom wall
				break;
			case SNAKE:
				if (i == body[0].y && j == body[0].x)
					cout << "O";
				else
					cout << "+";
				break;
			default:				
				cout << "\u2022";	
			}
		}
		cout << endl;
	}
}
void snake::updateFood()
{
	int x, y;
	do
	{
		x = rand() % WIDTH + 1;
		y = rand() % HEIGHT + 1;
	} while (ground[y][x] != NOTHING);

	ground[y][x] = FOOD;
	foodCounter++;
	gotoxy(x, y);
	cout << "\u2022";	//prints a middle dot
}







	gotoxy(WIDTH / 2 - 5, HEIGHT / 2 - 2);
	cout << "GAME OVER";
	gotoxy(WIDTH / 2 - 8, HEIGHT / 2 + 2);
	cout << "Your score is " << nagini.getFoodCounter() - 1 << "!" << endl;
	gotoxy(WIDTH / 2, HEIGHT / 2);

	_getch();
	return 0;
}